{"version":3,"sources":["../../../api/common/redis.js"],"names":["redis","setJson","key","value","expiresIn","set","JSON","stringify","expire","error","console","stack","getJson","parse","get"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;;AAEA;;AAEA;;;;;;;AAOA,OAAO,eAAeC,OAAf,CAAwBC,GAAxB,EAA6BC,KAA7B,EAAoCC,SAApC,EAA+C;AACpD,MAAI;AACF;AACAJ,UAAMK,GAAN,CAAUH,GAAV,EAAeI,KAAKC,SAAL,CAAeJ,KAAf,CAAf;AACA;AACA,QAAIC,SAAJ,EAAe,MAAMJ,MAAMQ,MAAN,CAAaN,GAAb,EAAkBE,SAAlB,CAAN;AAChB,GALD,CAMA,OAAMK,KAAN,EAAa;AACXC,YAAQD,KAAR,CAAcA,MAAME,KAApB;AACD;AACF;;AAGD;;;;AAIA,OAAO,eAAeC,OAAf,CAAwBV,GAAxB,EAA6B;AAClC,MAAI;AACF,WAAOI,KAAKO,KAAL,EAAW,MAAMb,MAAMc,GAAN,CAAUZ,GAAV,CAAjB,EAAP;AACD,GAFD,CAGA,OAAMO,KAAN,EAAa;AACXC,YAAQD,KAAR,CAAcA,KAAd;AACD;AACF","file":"redis.js","sourcesContent":["import redis from '../../config/redis';\n\n'use strict';\n\n/**\n * Sets the value of a key as a string in Redis\n *\n * @param {string} key - the key to store the value at\n * @param {any} value - A JSON serializable value\n * @param {number} [expiresIn] -  optional seconds to wait before deleting this key\n */\nexport async function setJson (key, value, expiresIn) {\n  try {\n    // set the key in redis\n    redis.set(key, JSON.stringify(value));\n    // add expiration in seconds if provided\n    if (expiresIn) await redis.expire(key, expiresIn);\n  }\n  catch(error) {\n    console.error(error.stack);\n  }\n}\n\n\n/**\n * Returns the parsed JSON for the given key in redis\n * @param {string} key - the key whose value we want to return\n */\nexport async function getJson (key) {\n  try {\n    return JSON.parse(await redis.get(key));\n  }\n  catch(error) {\n    console.error(error);\n  }\n}"]}