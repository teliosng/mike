{"version":3,"sources":["../../../api/controllers/mail.js"],"names":["sendAffiliateEmail","Autopilot","config","request","redis","requestIp","phone","autopilot","key","migrate","req","res","next","contacts","lists","roster","clientlist","data","length","contact","Phone","leadoutpost","firstName","FirstName","lastName","LastName","email","Email","apiKey","campaignId","options","uri","qs","headers","json","post","console","log","contact_id","success","addContact","body","MobilePhone","_autopilot_list","upsert","error","message","addKonnektiveOrder","cardNumber","cardMonth","cardYear","country","shipAddress1","cardSecurityCode","loginId","konnective","password","paySource","product1_qty","product1_id","productId","response","result","getLead","orderId","params","id","url","JSON","parse","getTrans","createKonnektiveLead","emailAddress","sendSMS","contactId","journeys","add","sendSMS2","contactid","query","updateContact","contactData","mapToAutopilotJson","leadoutpostData","mapToLeadoutpostJson","upsell","productQty","getStateInfo","stateNumber","details","getJson","mapToStateDetails","triggerJourney","hookid","getIpinfo","clientIp","getClientIp","ipinfo","send","addLeadoutpost","zip","type","primary_city","acceptable_cities","unacceptable_cities","state","county","timezone","area_codes","latitude","longitude","world_region","decommissioned","estimated_population","notes","phoneNumber","MailingStreet","address1","address2","MailingCity","city","MailingState","MailingPostalCode","postalCode","address","verifyPhoneNumber","number","formatted"],"mappings":"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","file":"mail.js","sourcesContent":["import {sendAffiliateEmail} from '../common/mailer';\n//import {Log} from '../models';\nimport Autopilot from 'autopilot-api';\nimport config from 'config3';\nimport request from 'request-promise';\nimport * as redis from '../common/redis';\nimport requestIp from 'request-ip';\nimport phone from 'phone';\n\nconst autopilot = new Autopilot(config.autopilot.key);\n\n\nasync function migrate(req, res, next) {\n    let contacts = await autopilot.lists.roster(config.autopilot.clientlist, 'person_0E8607F2-E308-438F-BF16-FB627DB4A4C9');\n    while(contacts.data.contacts.length >= 100) {\n        let contact = {};\n        for(contact of contacts.data.contacts) {\n            if(contact.Phone && phone(contact.Phone, 'US')[0]) {\n                const leadoutpost = {\n                    firstName: contact.FirstName,\n                    lastName: contact.LastName,\n                    email: contact.Email,\n                    phone: contact.Phone\n                };\n                leadoutpost.apiKey = config.leadoutpost.apiKey;\n                leadoutpost.campaignId = config.leadoutpost.campaignId;\n                const options = {\n                    uri: 'https://www.leadoutpost.com/api/v1/lead',\n                    qs: leadoutpost,\n                    headers: {\n                        'User-Agent': 'Request-Promise'\n                    },\n                    json: true // Automatically parses the JSON string in the response\n                };\n                await request.post(options);\n                console.log(contact.contact_id, contact.Email, contact.Phone, contact.FirstName, contact.LastName)\n            }\n        }\n        contacts = await autopilot.lists.roster(config.autopilot.clientlist, contact.contact_id);\n        console.log(\"last----------------\", contact.contact_id);\n    }\n    res.success({length: contacts.data.contacts.length});\n\n}\n/*\n * add contact to autopilot\n *\n * req.body.Email\n * req.body.FirstName\n * req.body.LastName\n * req.body.Phone\n * req.body.MobilePhone\n * req.body.SkypeId\n * req.body.Browser\n *\n */\n\nasync function addContact(req, res, next) {\n    try {\n        const leadoutpost = {\n            firstName: req.body.FirstName,\n            lastName: req.body.LastName,\n            email: req.body.Email,\n            phone: req.body.MobilePhone || req.body.Phone\n        };\n        if(!req.body.MobilePhone) {\n            req.body.MobilePhone = req.body.Phone;\n        }\n\n        if(!req.body.Phone) {\n            req.body.Phone = req.body.MobilePhone;\n        }\n        //await sendAffiliateEmail(req.body);\n        req.body._autopilot_list = config.autopilot.clientlist;\n        autopilot.contacts.upsert(req.body);\n\n        leadoutpost.apiKey = config.leadoutpost.apiKey;\n        leadoutpost.campaignId = config.leadoutpost.campaignId;\n\n        const options = {\n            uri: 'https://www.leadoutpost.com/api/v1/lead',\n            qs: leadoutpost,\n            headers: {\n                'User-Agent': 'Request-Promise'\n            },\n            json: true // Automatically parses the JSON string in the response\n        };\n\n        request.post(options);\n\n        res.success();\n    }\n    catch(error) {\n        console.log(error.message);\n    }\n}\n\n\nasync function addKonnektiveOrder(req, res, next) {\n    if(!req.body.cardNumber || !req.body.cardMonth  || !req.body.cardYear){\n        return res.error(\"Invalid Card Details\");\n    }\n    req.body.country = req.body.country || \"US\";\n\n    if (!req.body.shipAddress1) {\n        req.body[\"shipAddress1\"] = req.body[\"address1\"]\n        req.body[\"shipAddress2\"] = req.body[\"address2\"];\n        req.body[\"shipCity\"] = req.body[\"city\"];\n        req.body[\"shipState\"] = req.body[\"state\"];\n        req.body[\"shipPostalCode\"] = req.body[\"postalCode\"];\n        req.body[\"shipCountry\"] = req.body[\"country\"];\n    }\n\n    if(req.body.cardSecurityCode) {\n        delete req.body.cardSecurityCode;\n    }\n    //req.body.cardSecurityCode = \"100\";\n\n    req.body.campaignId = 3;\n    req.body.loginId = config.konnective.loginId;\n    req.body.password = config.konnective.password;\n    req.body.paySource = 'CREDITCARD';\n    req.body.product1_qty = 1;\n    req.body.product1_id = req.body.productId;\n    req.body.lastName = req.body.lastName || 'NA';\n    //req.body.cardExpiryDate = `${req.body.month}/${req.body.year}`;\n\n    //delete req.body.productId;\n\n    const options = {\n        uri: 'https://api.konnektive.com/order/import/',\n        qs: req.body,\n        headers: {\n            'User-Agent': 'Request-Promise'\n        },\n        json: true // Automatically parses the JSON string in the response\n    };\n\n    const response = await request(options);\n    console.log(response);\n\n    if(response.result == \"ERROR\") {\n        res.error(response.message, 200);\n    }\n    else {\n        res.success(response.message);\n    }\n}\n\nasync function getLead(req, res, next) {\n    const orderId = req.params.id;\n    const url = `https://api.konnektive.com/order/query/?loginId=${config.konnective.loginId}&password=${config.konnective.password}&orderId=${orderId}`\n    const response = JSON.parse(await request(url));\n    console.log(response);\n    if(response.result == \"ERROR\") {\n        res.error(response.message)\n    }\n    else {\n        res.success(response.message);\n    }\n}\n\nasync function getTrans(req, res, next) {\n    const orderId = req.params.id;\n    const url = `https://api.konnektive.com/transactions/query/?loginId=${config.konnective.loginId}&password=${config.konnective.password}&orderId=${orderId}`\n    const response = JSON.parse(await request(url));\n    if(response.result == \"ERROR\") {\n        res.error(response.message)\n    }\n    else {\n        res.success(response.message);\n    }\n}\n\nasync function createKonnektiveLead(req, res, next) {\n    const campaignId = 3;\n    req.body.loginId = config.konnective.loginId;\n    req.body.password = config.konnective.password;\n    req.body.campaignId = 3;\n    req.body.emailAddress = req.body.emailAddress || config.email;\n\n    const options = {\n        uri: 'https://api.konnektive.com/leads/import/',\n        qs: req.body,\n        headers: {\n            'User-Agent': 'Request-Promise'\n        },\n        json: true // Automatically parses the JSON string in the response\n    };\n    const response = await request(options);\n    console.log(response);\n    if(response.result == \"ERROR\") {\n        res.error(response.message)\n    }\n    else {\n        res.success(response.message);\n    }\n}\n\nasync function sendSMS(req, res, next) {\n    const {contactId} = req.params;\n    const response = await autopilot.journeys.add('0001', contactId);\n    console.log(response);\n    res.success();\n}\n\nasync function sendSMS2(req, res, next) {\n    const {contactid} = req.query;\n    const response = await autopilot.journeys.add('0001', contactid);\n    console.log(response);\n    res.success();\n}\n\nasync function updateContact(req, res, next) {\n    const contactData = mapToAutopilotJson(req.body);\n    const leadoutpostData = mapToLeadoutpostJson(req.body);\n\n    try {\n        //await sendAffiliateEmail(req.body);\n        contactData._autopilot_list = config.autopilot.clientlist;\n        autopilot.contacts.upsert(contactData);\n        res.success();\n\n        leadoutpostData.apiKey = config.leadoutpost.apiKey;\n        leadoutpostData.campaignId = config.leadoutpost.campaignId;\n\n        const options = {\n            uri: 'https://www.leadoutpost.com/api/v1/lead',\n            qs: leadoutpostData,\n            headers: {\n                'User-Agent': 'Request-Promise'\n            },\n            json: true // Automatically parses the JSON string in the response\n        };\n\n        request.post(options);\n    }\n    catch(error) {\n        return res.error(error.message);\n    }\n}\n\nasync function upsell(req, res, next) {\n    const {productId, productQty, orderId} = req.body;\n    if(!productId || !productQty) {\n        res.error('Invalid Upsell Data');\n    }\n    else {\n        req.body.loginId = config.konnective.loginId;\n        req.body.password = config.konnective.password;\n        const options = {\n            uri: 'https://api.konnektive.com/upsale/import/',\n            qs: req.body,\n            headers: {\n                'User-Agent': 'Request-Promise'\n            },\n            json: true // Automatically parses the JSON string in the response\n        };\n        const response = await request(options);\n        console.log(response);\n        if(response.result == \"ERROR\") {\n            res.error(response.message)\n        }\n        else {\n            res.success(response.message);\n        }\n    }\n}\n\nasync function getStateInfo(req, res, next) {\n    const {stateNumber} = req.params;\n    const details = await redis.getJson(stateNumber);\n    if(details) {\n        res.success({data: mapToStateDetails(details)});\n    }\n    else {\n        res.error('state not found', 200);\n    }\n}\n\nasync function triggerJourney(req, res, next) {\n    const {contactid} = req.query;\n    const hookid = req.query.hookid || '0001';\n    const response = await autopilot.journeys.add(hookid, contactid);\n    console.log(response);\n    res.success();\n}\n\nasync function getIpinfo(req, res, next) {\n    const clientIp = requestIp.getClientIp(req);\n    //const ipinfo = JSON.parse(await request(`http://ipinfo.io/${clientIp}`));\n    //i am hardcoding our token in here because i don't give a fuck\n    ipinfo = JSON.parse(await request(`https://ipinfo.io/${clientIp}/json/?token=1f4c1ea49e0aa2`));\n    res.send(ipinfo);\n}\n\nasync function addLeadoutpost(req, res, next) {\n    req.body.apiKey = config.leadoutpost.apiKey;\n    req.body.campaignId = config.leadoutpost.campaignId;\n\n    const options = {\n        uri: 'https://www.leadoutpost.com/api/v1/lead',\n        qs: req.body,\n        headers: {\n            'User-Agent': 'Request-Promise'\n        },\n        json: true // Automatically parses the JSON string in the response\n    };\n\n    const response = await request.post(options);\n    res.send(response);\n}\n\nfunction mapToStateDetails(data) {\n    return {\n        zip: data[0],\n        type: data[1],\n        primary_city: data[2],\n        acceptable_cities: data[3],\n        unacceptable_cities: data[4],\n        state: data[5],\n        county: data[6],\n        timezone: data[7],\n        area_codes: data[8],\n        latitude: data[9],\n        longitude: data[10],\n        world_region: data[11],\n        country: data[12],\n        decommissioned: data[13],\n        estimated_population: data[14],\n        notes: data[15]\n    }\n}\n\nfunction mapToAutopilotJson(data){\n    return {\n        FirstName: data.firstName,\n        LastName: data.lastName,\n        Email: data.emailAddress,\n        MobilePhone: data.phoneNumber,\n        MailingStreet: data.address1 + \" \" +  data.address2,\n        MailingCity: data.city,\n        MailingState: data.state,\n        MailingPostalCode: data.postalCode,\n    }\n}\n\nfunction mapToLeadoutpostJson(data) {\n    return {\n        firstName: data.firstName,\n        lastName: data.lastName,\n        email: data.emailAddress,\n        phone: data.phoneNumber,\n        address: data.address1 + \" \" + data.address2,\n        city: data.city,\n        state: data.state,\n        zip: data.postalCode,\n    }\n}\n\nasync function verifyPhoneNumber(req, res, next) {\n    const number = req.params.phone;\n    console.log(phone(number, 'US')[0]);\n    if(!phone(number, 'US')[0]) {\n        return res.error('Invalid phone number');\n    }\n\n    return res.success({formatted: phone(number, 'US')[0]});\n}\n\nexport default {\n    addContact: addContact,\n    getLead: getLead,\n    createKonnektiveLead: createKonnektiveLead,\n    sendSMS: sendSMS,\n    updateContact: updateContact,\n    sendSMS2: sendSMS2,\n    upsell: upsell,\n    getStateInfo: getStateInfo,\n    triggerJourney: triggerJourney,\n    getTrans: getTrans,\n    getIpinfo: getIpinfo,\n    addLeadoutpost: addLeadoutpost,\n    addKonnektiveOrder: addKonnektiveOrder,\n    verifyPhoneNumber: verifyPhoneNumber,\n\n    migrate: migrate,\n}\n"]}