{"version":3,"sources":["../../config/redis.js"],"names":["RedisClient","config","redisUrl","redis","REDIS_URL","retryStrategy","times","isRecursive","console","error","Error","retryAfter","Math","round","min","host","port","connector","options","on","arg","log","process","disconnect"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,SAAxB;;AAEA;AACA,OAAOC,MAAP,MAAmB,SAAnB;;AAEA;AACA,MAAMC,WAAWD,OAAOE,KAAP,CAAaC,SAA9B;;AAEA,MAAMD,QAAQ,IAAIH,WAAJ,CAAgBE,QAAhB,EAA0B;AACtCG,iBAAe,SAASA,aAAT,CAAwBC,KAAxB,EAA+BC,WAA/B,EAA4C;AACzD;AACA,QAAID,QAAQ,EAAZ,EAAgB;AACdE,cAAQC,KAAR,CAAc,mEAAd;AACA,aAAO,IAAIC,KAAJ,CAAU,sEAAV,CAAP;AACD;AACD,QAAIJ,SAAS,CAAb,EAAgB,OAAO,EAAP;AAChB,UAAMK,aAAaC,KAAKC,KAAL,CAAWD,KAAKE,GAAL,CAAST,cAAcC,QAAQ,CAAtB,EAAyB,IAAzB,IAAiC,GAA1C,EAA+C,KAA/C,CAAX,CAAnB;AACA,QAAI,CAACC,WAAL,EAAkBC,QAAQC,KAAR,CAAe,8BAA4BH,KAAM,6BAA0BK,UAAW,OAAtF;AAClB,WAAOA,UAAP;AACD;AAXqC,CAA1B,CAAd;;AAeA,MAAM,EAAEI,IAAF,EAAQC,IAAR,KAAiBb,MAAMc,SAAN,CAAgBC,OAAvC;;AAEAf,MAAMgB,EAAN,CAAS,SAAT,EAAqBC,GAAD,IAAS;AAC3BZ,UAAQa,GAAR,CAAa,iCAA+BN,IAAK,MAAGC,IAAK,GAAzD;AACD,CAFD;;AAIAb,MAAMgB,EAAN,CAAS,OAAT,EAAmBC,GAAD,IAAS;AACzBZ,UAAQa,GAAR,CAAY,oBAAZ;AACD,CAFD;;AAIAlB,MAAMgB,EAAN,CAAS,OAAT,EAAmBC,GAAD,IAAS;AACzBZ,UAAQa,GAAR,CAAY,wCAAZ;AACD,CAFD;;AAIAlB,MAAMgB,EAAN,CAAS,OAAT,EAAkB,MAAM;AACtBX,UAAQa,GAAR,CAAY,yBAAZ;AACD,CAFD;;AAIAC,QAAQH,EAAR,CAAW,QAAX,EAAqB,MAAM;AACzBhB,QAAMoB,UAAN;AACD,CAFD;;AAKA,eAAepB,KAAf","file":"redis.js","sourcesContent":["import RedisClient from 'ioredis';\n\n// let connectionDetails;\nimport config from 'config3';\n\n'use strict';\nconst redisUrl = config.redis.REDIS_URL;\n\nconst redis = new RedisClient(redisUrl, {\n  retryStrategy: function retryStrategy (times, isRecursive) {\n    // Exponential with a minimum of 2 seconds\n    if (times > 20) {\n      console.error('Redis Connection: Tried connecting more than 20 times. Giving up.');\n      return new Error('Redis Connection: Maximum number of connection retries (20) reached.');\n    }\n    if (times <= 1) return 20;\n    const retryAfter = Math.round(Math.min(retryStrategy(times - 1, true) * 1.5 ,10000));\n    if (!isRecursive) console.error(`Redis Connection: Attempt ${times} failed. Retrying after ${retryAfter} ms.`);\n    return retryAfter;\n  }\n});\n\n\nconst { host, port } = redis.connector.options;\n\nredis.on('connect', (arg) => {\n  console.log(`Connected to redis client at ${host}:${port}`);\n});\n\nredis.on('ready', (arg) => {\n  console.log('Redis server ready');\n});\n\nredis.on('error', (arg) => {\n  console.log('There was an error connecting to redis');\n});\n\nredis.on('close', () => {\n  console.log('Redis connection closed');\n});\n\nprocess.on('SIGINT', () => {\n  redis.disconnect();\n});\n\n\nexport default redis;"]}